// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.labsynch.labseer.domain;

import com.labsynch.labseer.domain.Container;
import com.labsynch.labseer.domain.ItxSubjectContainer;
import com.labsynch.labseer.domain.Subject;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect ItxSubjectContainer_Roo_Finder {
    
    public static TypedQuery<ItxSubjectContainer> ItxSubjectContainer.findItxSubjectContainersByCodeNameEquals(String codeName) {
        if (codeName == null || codeName.length() == 0) throw new IllegalArgumentException("The codeName argument is required");
        EntityManager em = ItxSubjectContainer.entityManager();
        TypedQuery<ItxSubjectContainer> q = em.createQuery("SELECT o FROM ItxSubjectContainer AS o WHERE o.codeName = :codeName", ItxSubjectContainer.class);
        q.setParameter("codeName", codeName);
        return q;
    }
    
    public static TypedQuery<ItxSubjectContainer> ItxSubjectContainer.findItxSubjectContainersByContainer(Container container) {
        if (container == null) throw new IllegalArgumentException("The container argument is required");
        EntityManager em = ItxSubjectContainer.entityManager();
        TypedQuery<ItxSubjectContainer> q = em.createQuery("SELECT o FROM ItxSubjectContainer AS o WHERE o.container = :container", ItxSubjectContainer.class);
        q.setParameter("container", container);
        return q;
    }
    
    public static TypedQuery<ItxSubjectContainer> ItxSubjectContainer.findItxSubjectContainersByLsTransactionEquals(Long lsTransaction) {
        if (lsTransaction == null) throw new IllegalArgumentException("The lsTransaction argument is required");
        EntityManager em = ItxSubjectContainer.entityManager();
        TypedQuery<ItxSubjectContainer> q = em.createQuery("SELECT o FROM ItxSubjectContainer AS o WHERE o.lsTransaction = :lsTransaction", ItxSubjectContainer.class);
        q.setParameter("lsTransaction", lsTransaction);
        return q;
    }
    
    public static TypedQuery<ItxSubjectContainer> ItxSubjectContainer.findItxSubjectContainersBySubject(Subject subject) {
        if (subject == null) throw new IllegalArgumentException("The subject argument is required");
        EntityManager em = ItxSubjectContainer.entityManager();
        TypedQuery<ItxSubjectContainer> q = em.createQuery("SELECT o FROM ItxSubjectContainer AS o WHERE o.subject = :subject", ItxSubjectContainer.class);
        q.setParameter("subject", subject);
        return q;
    }
    
}
