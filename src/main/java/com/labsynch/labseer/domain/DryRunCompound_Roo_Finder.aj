// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.labsynch.labseer.domain;

import com.labsynch.labseer.domain.DryRunCompound;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect DryRunCompound_Roo_Finder {
    
    public static Long DryRunCompound.countFindDryRunCompoundsByCdId(int CdId) {
        EntityManager em = DryRunCompound.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM DryRunCompound AS o WHERE o.CdId = :CdId", Long.class);
        q.setParameter("CdId", CdId);
        return ((Long) q.getSingleResult());
    }
    
    public static Long DryRunCompound.countFindDryRunCompoundsByCorpNameEquals(String corpName) {
        if (corpName == null || corpName.length() == 0) throw new IllegalArgumentException("The corpName argument is required");
        EntityManager em = DryRunCompound.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM DryRunCompound AS o WHERE o.corpName = :corpName", Long.class);
        q.setParameter("corpName", corpName);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<DryRunCompound> DryRunCompound.findDryRunCompoundsByCdId(int CdId) {
        EntityManager em = DryRunCompound.entityManager();
        TypedQuery<DryRunCompound> q = em.createQuery("SELECT o FROM DryRunCompound AS o WHERE o.CdId = :CdId", DryRunCompound.class);
        q.setParameter("CdId", CdId);
        return q;
    }
    
    public static TypedQuery<DryRunCompound> DryRunCompound.findDryRunCompoundsByCdId(int CdId, String sortFieldName, String sortOrder) {
        EntityManager em = DryRunCompound.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM DryRunCompound AS o WHERE o.CdId = :CdId");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<DryRunCompound> q = em.createQuery(queryBuilder.toString(), DryRunCompound.class);
        q.setParameter("CdId", CdId);
        return q;
    }
    
    public static TypedQuery<DryRunCompound> DryRunCompound.findDryRunCompoundsByCorpNameEquals(String corpName) {
        if (corpName == null || corpName.length() == 0) throw new IllegalArgumentException("The corpName argument is required");
        EntityManager em = DryRunCompound.entityManager();
        TypedQuery<DryRunCompound> q = em.createQuery("SELECT o FROM DryRunCompound AS o WHERE o.corpName = :corpName", DryRunCompound.class);
        q.setParameter("corpName", corpName);
        return q;
    }
    
    public static TypedQuery<DryRunCompound> DryRunCompound.findDryRunCompoundsByCorpNameEquals(String corpName, String sortFieldName, String sortOrder) {
        if (corpName == null || corpName.length() == 0) throw new IllegalArgumentException("The corpName argument is required");
        EntityManager em = DryRunCompound.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM DryRunCompound AS o WHERE o.corpName = :corpName");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<DryRunCompound> q = em.createQuery(queryBuilder.toString(), DryRunCompound.class);
        q.setParameter("corpName", corpName);
        return q;
    }
    
}
