// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.labsynch.labseer.domain;

import com.labsynch.labseer.domain.TempSelectTable;
import java.util.List;
import org.springframework.transaction.annotation.Transactional;

privileged aspect TempSelectTable_Roo_Jpa_ActiveRecord {
    
    public static long TempSelectTable.countTempSelectTables() {
        return entityManager().createQuery("SELECT COUNT(o) FROM TempSelectTable o", Long.class).getSingleResult();
    }
    
    public static List<TempSelectTable> TempSelectTable.findAllTempSelectTables() {
        return entityManager().createQuery("SELECT o FROM TempSelectTable o", TempSelectTable.class).getResultList();
    }
    
    public static TempSelectTable TempSelectTable.findTempSelectTable(Long id) {
        if (id == null) return null;
        return entityManager().find(TempSelectTable.class, id);
    }
    
    public static List<TempSelectTable> TempSelectTable.findTempSelectTableEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM TempSelectTable o", TempSelectTable.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void TempSelectTable.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void TempSelectTable.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            TempSelectTable attached = TempSelectTable.findTempSelectTable(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void TempSelectTable.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void TempSelectTable.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public TempSelectTable TempSelectTable.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        TempSelectTable merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
