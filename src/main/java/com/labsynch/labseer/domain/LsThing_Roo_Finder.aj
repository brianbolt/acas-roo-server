// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.labsynch.labseer.domain;

import com.labsynch.labseer.domain.LsThing;
import java.util.Date;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect LsThing_Roo_Finder {
    
    public static TypedQuery<LsThing> LsThing.findLsThingsByCodeNameEquals(String codeName) {
        if (codeName == null || codeName.length() == 0) throw new IllegalArgumentException("The codeName argument is required");
        EntityManager em = LsThing.entityManager();
        TypedQuery<LsThing> q = em.createQuery("SELECT o FROM LsThing AS o WHERE o.codeName = :codeName", LsThing.class);
        q.setParameter("codeName", codeName);
        return q;
    }
    
    public static TypedQuery<LsThing> LsThing.findLsThingsByCodeNameLike(String codeName) {
        if (codeName == null || codeName.length() == 0) throw new IllegalArgumentException("The codeName argument is required");
        codeName = codeName.replace('*', '%');
        if (codeName.charAt(0) != '%') {
            codeName = "%" + codeName;
        }
        if (codeName.charAt(codeName.length() - 1) != '%') {
            codeName = codeName + "%";
        }
        EntityManager em = LsThing.entityManager();
        TypedQuery<LsThing> q = em.createQuery("SELECT o FROM LsThing AS o WHERE LOWER(o.codeName) LIKE LOWER(:codeName)", LsThing.class);
        q.setParameter("codeName", codeName);
        return q;
    }
    
    public static TypedQuery<LsThing> LsThing.findLsThingsByLsKindEquals(String lsKind) {
        if (lsKind == null || lsKind.length() == 0) throw new IllegalArgumentException("The lsKind argument is required");
        EntityManager em = LsThing.entityManager();
        TypedQuery<LsThing> q = em.createQuery("SELECT o FROM LsThing AS o WHERE o.lsKind = :lsKind", LsThing.class);
        q.setParameter("lsKind", lsKind);
        return q;
    }
    
    public static TypedQuery<LsThing> LsThing.findLsThingsByLsKindLike(String lsKind) {
        if (lsKind == null || lsKind.length() == 0) throw new IllegalArgumentException("The lsKind argument is required");
        lsKind = lsKind.replace('*', '%');
        if (lsKind.charAt(0) != '%') {
            lsKind = "%" + lsKind;
        }
        if (lsKind.charAt(lsKind.length() - 1) != '%') {
            lsKind = lsKind + "%";
        }
        EntityManager em = LsThing.entityManager();
        TypedQuery<LsThing> q = em.createQuery("SELECT o FROM LsThing AS o WHERE LOWER(o.lsKind) LIKE LOWER(:lsKind)", LsThing.class);
        q.setParameter("lsKind", lsKind);
        return q;
    }
    
    public static TypedQuery<LsThing> LsThing.findLsThingsByLsTransactionEquals(Long lsTransaction) {
        if (lsTransaction == null) throw new IllegalArgumentException("The lsTransaction argument is required");
        EntityManager em = LsThing.entityManager();
        TypedQuery<LsThing> q = em.createQuery("SELECT o FROM LsThing AS o WHERE o.lsTransaction = :lsTransaction", LsThing.class);
        q.setParameter("lsTransaction", lsTransaction);
        return q;
    }
    
    public static TypedQuery<LsThing> LsThing.findLsThingsByLsTypeAndKindEquals(String lsTypeAndKind) {
        if (lsTypeAndKind == null || lsTypeAndKind.length() == 0) throw new IllegalArgumentException("The lsTypeAndKind argument is required");
        EntityManager em = LsThing.entityManager();
        TypedQuery<LsThing> q = em.createQuery("SELECT o FROM LsThing AS o WHERE o.lsTypeAndKind = :lsTypeAndKind", LsThing.class);
        q.setParameter("lsTypeAndKind", lsTypeAndKind);
        return q;
    }
    
    public static TypedQuery<LsThing> LsThing.findLsThingsByLsTypeEquals(String lsType) {
        if (lsType == null || lsType.length() == 0) throw new IllegalArgumentException("The lsType argument is required");
        EntityManager em = LsThing.entityManager();
        TypedQuery<LsThing> q = em.createQuery("SELECT o FROM LsThing AS o WHERE o.lsType = :lsType", LsThing.class);
        q.setParameter("lsType", lsType);
        return q;
    }
    
    public static TypedQuery<LsThing> LsThing.findLsThingsByRecordedByLike(String recordedBy) {
        if (recordedBy == null || recordedBy.length() == 0) throw new IllegalArgumentException("The recordedBy argument is required");
        recordedBy = recordedBy.replace('*', '%');
        if (recordedBy.charAt(0) != '%') {
            recordedBy = "%" + recordedBy;
        }
        if (recordedBy.charAt(recordedBy.length() - 1) != '%') {
            recordedBy = recordedBy + "%";
        }
        EntityManager em = LsThing.entityManager();
        TypedQuery<LsThing> q = em.createQuery("SELECT o FROM LsThing AS o WHERE LOWER(o.recordedBy) LIKE LOWER(:recordedBy)", LsThing.class);
        q.setParameter("recordedBy", recordedBy);
        return q;
    }
    
    public static TypedQuery<LsThing> LsThing.findLsThingsByRecordedDateGreaterThan(Date recordedDate) {
        if (recordedDate == null) throw new IllegalArgumentException("The recordedDate argument is required");
        EntityManager em = LsThing.entityManager();
        TypedQuery<LsThing> q = em.createQuery("SELECT o FROM LsThing AS o WHERE o.recordedDate > :recordedDate", LsThing.class);
        q.setParameter("recordedDate", recordedDate);
        return q;
    }
    
    public static TypedQuery<LsThing> LsThing.findLsThingsByRecordedDateLessThan(Date recordedDate) {
        if (recordedDate == null) throw new IllegalArgumentException("The recordedDate argument is required");
        EntityManager em = LsThing.entityManager();
        TypedQuery<LsThing> q = em.createQuery("SELECT o FROM LsThing AS o WHERE o.recordedDate < :recordedDate", LsThing.class);
        q.setParameter("recordedDate", recordedDate);
        return q;
    }
    
}
