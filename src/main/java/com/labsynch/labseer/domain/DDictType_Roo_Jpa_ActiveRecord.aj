// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.labsynch.labseer.domain;

import com.labsynch.labseer.domain.DDictType;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect DDictType_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager DDictType.entityManager;
    
    public static final EntityManager DDictType.entityManager() {
        EntityManager em = new DDictType().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long DDictType.countDDictTypes() {
        return entityManager().createQuery("SELECT COUNT(o) FROM DDictType o", Long.class).getSingleResult();
    }
    
    public static List<DDictType> DDictType.findAllDDictTypes() {
        return entityManager().createQuery("SELECT o FROM DDictType o", DDictType.class).getResultList();
    }
    
    public static DDictType DDictType.findDDictType(Long id) {
        if (id == null) return null;
        return entityManager().find(DDictType.class, id);
    }
    
    public static List<DDictType> DDictType.findDDictTypeEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM DDictType o", DDictType.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void DDictType.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void DDictType.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            DDictType attached = DDictType.findDDictType(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void DDictType.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void DDictType.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public DDictType DDictType.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        DDictType merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
