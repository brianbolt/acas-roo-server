// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.labsynch.labseer.domain;

import com.labsynch.labseer.domain.Container;
import com.labsynch.labseer.domain.ItxContainerContainer;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect ItxContainerContainer_Roo_Finder {
    
    public static TypedQuery<ItxContainerContainer> ItxContainerContainer.findItxContainerContainersByLsTransactionEquals(Long lsTransaction) {
        if (lsTransaction == null) throw new IllegalArgumentException("The lsTransaction argument is required");
        EntityManager em = ItxContainerContainer.entityManager();
        TypedQuery<ItxContainerContainer> q = em.createQuery("SELECT o FROM ItxContainerContainer AS o WHERE o.lsTransaction = :lsTransaction", ItxContainerContainer.class);
        q.setParameter("lsTransaction", lsTransaction);
        return q;
    }
    
    public static TypedQuery<ItxContainerContainer> ItxContainerContainer.findItxContainerContainersByLsTypeEqualsAndFirstContainerEquals(String lsType, Container firstContainer) {
        if (lsType == null || lsType.length() == 0) throw new IllegalArgumentException("The lsType argument is required");
        if (firstContainer == null) throw new IllegalArgumentException("The firstContainer argument is required");
        EntityManager em = ItxContainerContainer.entityManager();
        TypedQuery<ItxContainerContainer> q = em.createQuery("SELECT o FROM ItxContainerContainer AS o WHERE o.lsType = :lsType  AND o.firstContainer = :firstContainer", ItxContainerContainer.class);
        q.setParameter("lsType", lsType);
        q.setParameter("firstContainer", firstContainer);
        return q;
    }
    
    public static TypedQuery<ItxContainerContainer> ItxContainerContainer.findItxContainerContainersByLsTypeEqualsAndSecondContainerEquals(String lsType, Container secondContainer) {
        if (lsType == null || lsType.length() == 0) throw new IllegalArgumentException("The lsType argument is required");
        if (secondContainer == null) throw new IllegalArgumentException("The secondContainer argument is required");
        EntityManager em = ItxContainerContainer.entityManager();
        TypedQuery<ItxContainerContainer> q = em.createQuery("SELECT o FROM ItxContainerContainer AS o WHERE o.lsType = :lsType  AND o.secondContainer = :secondContainer", ItxContainerContainer.class);
        q.setParameter("lsType", lsType);
        q.setParameter("secondContainer", secondContainer);
        return q;
    }
    
}
