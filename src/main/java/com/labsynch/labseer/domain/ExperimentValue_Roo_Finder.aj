// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.labsynch.labseer.domain;

import com.labsynch.labseer.domain.ExperimentState;
import com.labsynch.labseer.domain.ExperimentValue;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect ExperimentValue_Roo_Finder {
    
    public static TypedQuery<ExperimentValue> ExperimentValue.findExperimentValuesByLsState(ExperimentState lsState) {
        if (lsState == null) throw new IllegalArgumentException("The lsState argument is required");
        EntityManager em = ExperimentValue.entityManager();
        TypedQuery<ExperimentValue> q = em.createQuery("SELECT o FROM ExperimentValue AS o WHERE o.lsState = :lsState", ExperimentValue.class);
        q.setParameter("lsState", lsState);
        return q;
    }
    
    public static TypedQuery<ExperimentValue> ExperimentValue.findExperimentValuesByLsStateAndIgnoredNotAndLsKindEqualsAndLsTypeEqualsAndStringValueEquals(ExperimentState lsState, boolean ignored, String lsKind, String lsType, String stringValue) {
        if (lsState == null) throw new IllegalArgumentException("The lsState argument is required");
        if (lsKind == null || lsKind.length() == 0) throw new IllegalArgumentException("The lsKind argument is required");
        if (lsType == null || lsType.length() == 0) throw new IllegalArgumentException("The lsType argument is required");
        if (stringValue == null || stringValue.length() == 0) throw new IllegalArgumentException("The stringValue argument is required");
        EntityManager em = ExperimentValue.entityManager();
        TypedQuery<ExperimentValue> q = em.createQuery("SELECT o FROM ExperimentValue AS o WHERE o.lsState = :lsState AND o.ignored IS NOT :ignored  AND o.lsKind = :lsKind  AND o.lsType = :lsType  AND o.stringValue = :stringValue", ExperimentValue.class);
        q.setParameter("lsState", lsState);
        q.setParameter("ignored", ignored);
        q.setParameter("lsKind", lsKind);
        q.setParameter("lsType", lsType);
        q.setParameter("stringValue", stringValue);
        return q;
    }
    
}
