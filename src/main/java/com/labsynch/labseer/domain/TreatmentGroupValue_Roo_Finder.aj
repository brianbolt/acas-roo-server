// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.labsynch.labseer.domain;

import com.labsynch.labseer.domain.TreatmentGroupState;
import com.labsynch.labseer.domain.TreatmentGroupValue;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect TreatmentGroupValue_Roo_Finder {
    
    public static TypedQuery<TreatmentGroupValue> TreatmentGroupValue.findTreatmentGroupValuesByCodeValueEquals(String codeValue) {
        if (codeValue == null || codeValue.length() == 0) throw new IllegalArgumentException("The codeValue argument is required");
        EntityManager em = TreatmentGroupValue.entityManager();
        TypedQuery<TreatmentGroupValue> q = em.createQuery("SELECT o FROM TreatmentGroupValue AS o WHERE o.codeValue = :codeValue", TreatmentGroupValue.class);
        q.setParameter("codeValue", codeValue);
        return q;
    }
    
    public static TypedQuery<TreatmentGroupValue> TreatmentGroupValue.findTreatmentGroupValuesByIgnoredNotAndCodeValueEquals(boolean ignored, String codeValue) {
        if (codeValue == null || codeValue.length() == 0) throw new IllegalArgumentException("The codeValue argument is required");
        EntityManager em = TreatmentGroupValue.entityManager();
        TypedQuery<TreatmentGroupValue> q = em.createQuery("SELECT o FROM TreatmentGroupValue AS o WHERE o.ignored IS NOT :ignored  AND o.codeValue = :codeValue", TreatmentGroupValue.class);
        q.setParameter("ignored", ignored);
        q.setParameter("codeValue", codeValue);
        return q;
    }
    
    public static TypedQuery<TreatmentGroupValue> TreatmentGroupValue.findTreatmentGroupValuesByLsState(TreatmentGroupState lsState) {
        if (lsState == null) throw new IllegalArgumentException("The lsState argument is required");
        EntityManager em = TreatmentGroupValue.entityManager();
        TypedQuery<TreatmentGroupValue> q = em.createQuery("SELECT o FROM TreatmentGroupValue AS o WHERE o.lsState = :lsState", TreatmentGroupValue.class);
        q.setParameter("lsState", lsState);
        return q;
    }
    
    public static TypedQuery<TreatmentGroupValue> TreatmentGroupValue.findTreatmentGroupValuesByLsTransactionEquals(Long lsTransaction) {
        if (lsTransaction == null) throw new IllegalArgumentException("The lsTransaction argument is required");
        EntityManager em = TreatmentGroupValue.entityManager();
        TypedQuery<TreatmentGroupValue> q = em.createQuery("SELECT o FROM TreatmentGroupValue AS o WHERE o.lsTransaction = :lsTransaction", TreatmentGroupValue.class);
        q.setParameter("lsTransaction", lsTransaction);
        return q;
    }
    
}
