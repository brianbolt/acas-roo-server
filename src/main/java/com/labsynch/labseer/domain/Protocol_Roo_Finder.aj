// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.labsynch.labseer.domain;

import com.labsynch.labseer.domain.Protocol;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Protocol_Roo_Finder {
    
    public static TypedQuery<Protocol> Protocol.findProtocolsByCodeNameEquals(String codeName) {
        if (codeName == null || codeName.length() == 0) throw new IllegalArgumentException("The codeName argument is required");
        EntityManager em = Protocol.entityManager();
        TypedQuery<Protocol> q = em.createQuery("SELECT o FROM Protocol AS o WHERE o.codeName = :codeName", Protocol.class);
        q.setParameter("codeName", codeName);
        return q;
    }
    
    public static TypedQuery<Protocol> Protocol.findProtocolsByIgnoredNot(boolean ignored) {
        EntityManager em = Protocol.entityManager();
        TypedQuery<Protocol> q = em.createQuery("SELECT o FROM Protocol AS o WHERE o.ignored IS NOT :ignored", Protocol.class);
        q.setParameter("ignored", ignored);
        return q;
    }
    
    public static TypedQuery<Protocol> Protocol.findProtocolsByLsKindEquals(String lsKind) {
        if (lsKind == null || lsKind.length() == 0) throw new IllegalArgumentException("The lsKind argument is required");
        EntityManager em = Protocol.entityManager();
        TypedQuery<Protocol> q = em.createQuery("SELECT o FROM Protocol AS o WHERE o.lsKind = :lsKind", Protocol.class);
        q.setParameter("lsKind", lsKind);
        return q;
    }
    
    public static TypedQuery<Protocol> Protocol.findProtocolsByLsTransactionEquals(Long lsTransaction) {
        if (lsTransaction == null) throw new IllegalArgumentException("The lsTransaction argument is required");
        EntityManager em = Protocol.entityManager();
        TypedQuery<Protocol> q = em.createQuery("SELECT o FROM Protocol AS o WHERE o.lsTransaction = :lsTransaction", Protocol.class);
        q.setParameter("lsTransaction", lsTransaction);
        return q;
    }
    
    public static TypedQuery<Protocol> Protocol.findProtocolsByLsTypeAndKindEquals(String lsTypeAndKind) {
        if (lsTypeAndKind == null || lsTypeAndKind.length() == 0) throw new IllegalArgumentException("The lsTypeAndKind argument is required");
        EntityManager em = Protocol.entityManager();
        TypedQuery<Protocol> q = em.createQuery("SELECT o FROM Protocol AS o WHERE o.lsTypeAndKind = :lsTypeAndKind", Protocol.class);
        q.setParameter("lsTypeAndKind", lsTypeAndKind);
        return q;
    }
    
    public static TypedQuery<Protocol> Protocol.findProtocolsByLsTypeEquals(String lsType) {
        if (lsType == null || lsType.length() == 0) throw new IllegalArgumentException("The lsType argument is required");
        EntityManager em = Protocol.entityManager();
        TypedQuery<Protocol> q = em.createQuery("SELECT o FROM Protocol AS o WHERE o.lsType = :lsType", Protocol.class);
        q.setParameter("lsType", lsType);
        return q;
    }
    
    public static TypedQuery<Protocol> Protocol.findProtocolsByLsTypeEqualsAndLsKindEquals(String lsType, String lsKind) {
        if (lsType == null || lsType.length() == 0) throw new IllegalArgumentException("The lsType argument is required");
        if (lsKind == null || lsKind.length() == 0) throw new IllegalArgumentException("The lsKind argument is required");
        EntityManager em = Protocol.entityManager();
        TypedQuery<Protocol> q = em.createQuery("SELECT o FROM Protocol AS o WHERE o.lsType = :lsType  AND o.lsKind = :lsKind", Protocol.class);
        q.setParameter("lsType", lsType);
        q.setParameter("lsKind", lsKind);
        return q;
    }
    
}
