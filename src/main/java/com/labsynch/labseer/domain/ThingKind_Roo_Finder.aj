// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.labsynch.labseer.domain;

import com.labsynch.labseer.domain.ThingKind;
import com.labsynch.labseer.domain.ThingType;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect ThingKind_Roo_Finder {
    
    public static TypedQuery<ThingKind> ThingKind.findThingKindsByKindNameEqualsAndLsType(String kindName, ThingType lsType) {
        if (kindName == null || kindName.length() == 0) throw new IllegalArgumentException("The kindName argument is required");
        if (lsType == null) throw new IllegalArgumentException("The lsType argument is required");
        EntityManager em = ThingKind.entityManager();
        TypedQuery<ThingKind> q = em.createQuery("SELECT o FROM ThingKind AS o WHERE o.kindName = :kindName  AND o.lsType = :lsType", ThingKind.class);
        q.setParameter("kindName", kindName);
        q.setParameter("lsType", lsType);
        return q;
    }
    
    public static TypedQuery<ThingKind> ThingKind.findThingKindsByLsType(ThingType lsType) {
        if (lsType == null) throw new IllegalArgumentException("The lsType argument is required");
        EntityManager em = ThingKind.entityManager();
        TypedQuery<ThingKind> q = em.createQuery("SELECT o FROM ThingKind AS o WHERE o.lsType = :lsType", ThingKind.class);
        q.setParameter("lsType", lsType);
        return q;
    }
    
    public static TypedQuery<ThingKind> ThingKind.findThingKindsByLsTypeAndKindEquals(String lsTypeAndKind) {
        if (lsTypeAndKind == null || lsTypeAndKind.length() == 0) throw new IllegalArgumentException("The lsTypeAndKind argument is required");
        EntityManager em = ThingKind.entityManager();
        TypedQuery<ThingKind> q = em.createQuery("SELECT o FROM ThingKind AS o WHERE o.lsTypeAndKind = :lsTypeAndKind", ThingKind.class);
        q.setParameter("lsTypeAndKind", lsTypeAndKind);
        return q;
    }
    
}
