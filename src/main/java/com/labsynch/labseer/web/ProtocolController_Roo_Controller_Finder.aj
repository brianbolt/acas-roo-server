// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.labsynch.labseer.web;

import com.labsynch.labseer.domain.Protocol;
import com.labsynch.labseer.web.ProtocolController;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

privileged aspect ProtocolController_Roo_Controller_Finder {
    
    @RequestMapping(params = { "find=ByCodeNameEquals", "form" }, method = RequestMethod.GET)
    public String ProtocolController.findProtocolsByCodeNameEqualsForm(Model uiModel) {
        return "protocols/findProtocolsByCodeNameEquals";
    }
    
    @RequestMapping(params = "find=ByCodeNameEquals", method = RequestMethod.GET)
    public String ProtocolController.findProtocolsByCodeNameEquals(@RequestParam("codeName") String codeName, Model uiModel) {
        uiModel.addAttribute("protocols", Protocol.findProtocolsByCodeNameEquals(codeName).getResultList());
        return "protocols/list";
    }
    
    @RequestMapping(params = { "find=ByIgnoredNot", "form" }, method = RequestMethod.GET)
    public String ProtocolController.findProtocolsByIgnoredNotForm(Model uiModel) {
        return "protocols/findProtocolsByIgnoredNot";
    }
    
    @RequestMapping(params = "find=ByIgnoredNot", method = RequestMethod.GET)
    public String ProtocolController.findProtocolsByIgnoredNot(@RequestParam(value = "ignored", required = false) boolean ignored, Model uiModel) {
        uiModel.addAttribute("protocols", Protocol.findProtocolsByIgnoredNot(ignored).getResultList());
        return "protocols/list";
    }
    
    @RequestMapping(params = { "find=ByLsKindEquals", "form" }, method = RequestMethod.GET)
    public String ProtocolController.findProtocolsByLsKindEqualsForm(Model uiModel) {
        return "protocols/findProtocolsByLsKindEquals";
    }
    
    @RequestMapping(params = "find=ByLsKindEquals", method = RequestMethod.GET)
    public String ProtocolController.findProtocolsByLsKindEquals(@RequestParam("lsKind") String lsKind, Model uiModel) {
        uiModel.addAttribute("protocols", Protocol.findProtocolsByLsKindEquals(lsKind).getResultList());
        return "protocols/list";
    }
    
    @RequestMapping(params = { "find=ByLsKindLike", "form" }, method = RequestMethod.GET)
    public String ProtocolController.findProtocolsByLsKindLikeForm(Model uiModel) {
        return "protocols/findProtocolsByLsKindLike";
    }
    
    @RequestMapping(params = "find=ByLsKindLike", method = RequestMethod.GET)
    public String ProtocolController.findProtocolsByLsKindLike(@RequestParam("lsKind") String lsKind, Model uiModel) {
        uiModel.addAttribute("protocols", Protocol.findProtocolsByLsKindLike(lsKind).getResultList());
        return "protocols/list";
    }
    
    @RequestMapping(params = { "find=ByLsTransactionEquals", "form" }, method = RequestMethod.GET)
    public String ProtocolController.findProtocolsByLsTransactionEqualsForm(Model uiModel) {
        return "protocols/findProtocolsByLsTransactionEquals";
    }
    
    @RequestMapping(params = "find=ByLsTransactionEquals", method = RequestMethod.GET)
    public String ProtocolController.findProtocolsByLsTransactionEquals(@RequestParam("lsTransaction") Long lsTransaction, Model uiModel) {
        uiModel.addAttribute("protocols", Protocol.findProtocolsByLsTransactionEquals(lsTransaction).getResultList());
        return "protocols/list";
    }
    
    @RequestMapping(params = { "find=ByLsTypeAndKindEquals", "form" }, method = RequestMethod.GET)
    public String ProtocolController.findProtocolsByLsTypeAndKindEqualsForm(Model uiModel) {
        return "protocols/findProtocolsByLsTypeAndKindEquals";
    }
    
    @RequestMapping(params = "find=ByLsTypeAndKindEquals", method = RequestMethod.GET)
    public String ProtocolController.findProtocolsByLsTypeAndKindEquals(@RequestParam("lsTypeAndKind") String lsTypeAndKind, Model uiModel) {
        uiModel.addAttribute("protocols", Protocol.findProtocolsByLsTypeAndKindEquals(lsTypeAndKind).getResultList());
        return "protocols/list";
    }
    
    @RequestMapping(params = { "find=ByLsTypeEquals", "form" }, method = RequestMethod.GET)
    public String ProtocolController.findProtocolsByLsTypeEqualsForm(Model uiModel) {
        return "protocols/findProtocolsByLsTypeEquals";
    }
    
    @RequestMapping(params = "find=ByLsTypeEquals", method = RequestMethod.GET)
    public String ProtocolController.findProtocolsByLsTypeEquals(@RequestParam("lsType") String lsType, Model uiModel) {
        uiModel.addAttribute("protocols", Protocol.findProtocolsByLsTypeEquals(lsType).getResultList());
        return "protocols/list";
    }
    
    @RequestMapping(params = { "find=ByLsTypeEqualsAndLsKindEquals", "form" }, method = RequestMethod.GET)
    public String ProtocolController.findProtocolsByLsTypeEqualsAndLsKindEqualsForm(Model uiModel) {
        return "protocols/findProtocolsByLsTypeEqualsAndLsKindEquals";
    }
    
    @RequestMapping(params = "find=ByLsTypeEqualsAndLsKindEquals", method = RequestMethod.GET)
    public String ProtocolController.findProtocolsByLsTypeEqualsAndLsKindEquals(@RequestParam("lsType") String lsType, @RequestParam("lsKind") String lsKind, Model uiModel) {
        uiModel.addAttribute("protocols", Protocol.findProtocolsByLsTypeEqualsAndLsKindEquals(lsType, lsKind).getResultList());
        return "protocols/list";
    }
    
    @RequestMapping(params = { "find=ByLsTypeLike", "form" }, method = RequestMethod.GET)
    public String ProtocolController.findProtocolsByLsTypeLikeForm(Model uiModel) {
        return "protocols/findProtocolsByLsTypeLike";
    }
    
    @RequestMapping(params = "find=ByLsTypeLike", method = RequestMethod.GET)
    public String ProtocolController.findProtocolsByLsTypeLike(@RequestParam("lsType") String lsType, Model uiModel) {
        uiModel.addAttribute("protocols", Protocol.findProtocolsByLsTypeLike(lsType).getResultList());
        return "protocols/list";
    }
    
    @RequestMapping(params = { "find=ByRecordedByLike", "form" }, method = RequestMethod.GET)
    public String ProtocolController.findProtocolsByRecordedByLikeForm(Model uiModel) {
        return "protocols/findProtocolsByRecordedByLike";
    }
    
    @RequestMapping(params = "find=ByRecordedByLike", method = RequestMethod.GET)
    public String ProtocolController.findProtocolsByRecordedByLike(@RequestParam("recordedBy") String recordedBy, Model uiModel) {
        uiModel.addAttribute("protocols", Protocol.findProtocolsByRecordedByLike(recordedBy).getResultList());
        return "protocols/list";
    }
    
}
