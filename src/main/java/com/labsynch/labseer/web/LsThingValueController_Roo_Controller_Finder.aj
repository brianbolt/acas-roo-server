// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.labsynch.labseer.web;

import com.labsynch.labseer.domain.LsThingState;
import com.labsynch.labseer.domain.LsThingValue;
import com.labsynch.labseer.web.LsThingValueController;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

privileged aspect LsThingValueController_Roo_Controller_Finder {
    
    @RequestMapping(params = { "find=ByCodeValueEquals", "form" }, method = RequestMethod.GET)
    public String LsThingValueController.findLsThingValuesByCodeValueEqualsForm(Model uiModel) {
        return "lsthingvalues/findLsThingValuesByCodeValueEquals";
    }
    
    @RequestMapping(params = "find=ByCodeValueEquals", method = RequestMethod.GET)
    public String LsThingValueController.findLsThingValuesByCodeValueEquals(@RequestParam("codeValue") String codeValue, Model uiModel) {
        uiModel.addAttribute("lsthingvalues", LsThingValue.findLsThingValuesByCodeValueEquals(codeValue).getResultList());
        return "lsthingvalues/list";
    }
    
    @RequestMapping(params = { "find=ByIgnoredNotAndCodeValueEquals", "form" }, method = RequestMethod.GET)
    public String LsThingValueController.findLsThingValuesByIgnoredNotAndCodeValueEqualsForm(Model uiModel) {
        return "lsthingvalues/findLsThingValuesByIgnoredNotAndCodeValueEquals";
    }
    
    @RequestMapping(params = "find=ByIgnoredNotAndCodeValueEquals", method = RequestMethod.GET)
    public String LsThingValueController.findLsThingValuesByIgnoredNotAndCodeValueEquals(@RequestParam(value = "ignored", required = false) boolean ignored, @RequestParam("codeValue") String codeValue, Model uiModel) {
        uiModel.addAttribute("lsthingvalues", LsThingValue.findLsThingValuesByIgnoredNotAndCodeValueEquals(ignored, codeValue).getResultList());
        return "lsthingvalues/list";
    }
    
    @RequestMapping(params = { "find=ByLsState", "form" }, method = RequestMethod.GET)
    public String LsThingValueController.findLsThingValuesByLsStateForm(Model uiModel) {
        uiModel.addAttribute("lsthingstates", LsThingState.findAllLsThingStates());
        return "lsthingvalues/findLsThingValuesByLsState";
    }
    
    @RequestMapping(params = "find=ByLsState", method = RequestMethod.GET)
    public String LsThingValueController.findLsThingValuesByLsState(@RequestParam("lsState") LsThingState lsState, Model uiModel) {
        uiModel.addAttribute("lsthingvalues", LsThingValue.findLsThingValuesByLsState(lsState).getResultList());
        return "lsthingvalues/list";
    }
    
    @RequestMapping(params = { "find=ByLsTransactionEquals", "form" }, method = RequestMethod.GET)
    public String LsThingValueController.findLsThingValuesByLsTransactionEqualsForm(Model uiModel) {
        return "lsthingvalues/findLsThingValuesByLsTransactionEquals";
    }
    
    @RequestMapping(params = "find=ByLsTransactionEquals", method = RequestMethod.GET)
    public String LsThingValueController.findLsThingValuesByLsTransactionEquals(@RequestParam("lsTransaction") Long lsTransaction, Model uiModel) {
        uiModel.addAttribute("lsthingvalues", LsThingValue.findLsThingValuesByLsTransactionEquals(lsTransaction).getResultList());
        return "lsthingvalues/list";
    }
    
}
