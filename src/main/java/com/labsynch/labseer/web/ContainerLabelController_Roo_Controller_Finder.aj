// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.labsynch.labseer.web;

import com.labsynch.labseer.domain.Container;
import com.labsynch.labseer.domain.ContainerLabel;
import com.labsynch.labseer.web.ContainerLabelController;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

privileged aspect ContainerLabelController_Roo_Controller_Finder {
    
    @RequestMapping(params = { "find=ByContainerAndIgnoredNot", "form" }, method = RequestMethod.GET)
    public String ContainerLabelController.findContainerLabelsByContainerAndIgnoredNotForm(Model uiModel) {
        uiModel.addAttribute("containers", Container.findAllContainers());
        return "containerlabels/findContainerLabelsByContainerAndIgnoredNot";
    }
    
    @RequestMapping(params = "find=ByContainerAndIgnoredNot", method = RequestMethod.GET)
    public String ContainerLabelController.findContainerLabelsByContainerAndIgnoredNot(@RequestParam("container") Container container, @RequestParam(value = "ignored", required = false) boolean ignored, Model uiModel) {
        uiModel.addAttribute("containerlabels", ContainerLabel.findContainerLabelsByContainerAndIgnoredNot(container, ignored).getResultList());
        return "containerlabels/list";
    }
    
    @RequestMapping(params = { "find=ByLabelTextEqualsAndIgnoredNot", "form" }, method = RequestMethod.GET)
    public String ContainerLabelController.findContainerLabelsByLabelTextEqualsAndIgnoredNotForm(Model uiModel) {
        return "containerlabels/findContainerLabelsByLabelTextEqualsAndIgnoredNot";
    }
    
    @RequestMapping(params = "find=ByLabelTextEqualsAndIgnoredNot", method = RequestMethod.GET)
    public String ContainerLabelController.findContainerLabelsByLabelTextEqualsAndIgnoredNot(@RequestParam("labelText") String labelText, @RequestParam(value = "ignored", required = false) boolean ignored, Model uiModel) {
        uiModel.addAttribute("containerlabels", ContainerLabel.findContainerLabelsByLabelTextEqualsAndIgnoredNot(labelText, ignored).getResultList());
        return "containerlabels/list";
    }
    
    @RequestMapping(params = { "find=ByLsTransactionEquals", "form" }, method = RequestMethod.GET)
    public String ContainerLabelController.findContainerLabelsByLsTransactionEqualsForm(Model uiModel) {
        return "containerlabels/findContainerLabelsByLsTransactionEquals";
    }
    
    @RequestMapping(params = "find=ByLsTransactionEquals", method = RequestMethod.GET)
    public String ContainerLabelController.findContainerLabelsByLsTransactionEquals(@RequestParam("lsTransaction") Long lsTransaction, Model uiModel) {
        uiModel.addAttribute("containerlabels", ContainerLabel.findContainerLabelsByLsTransactionEquals(lsTransaction).getResultList());
        return "containerlabels/list";
    }
    
    @RequestMapping(params = { "find=ByLsTypeEqualsAndLabelTextEqualsAndIgnoredNot", "form" }, method = RequestMethod.GET)
    public String ContainerLabelController.findContainerLabelsByLsTypeEqualsAndLabelTextEqualsAndIgnoredNotForm(Model uiModel) {
        return "containerlabels/findContainerLabelsByLsTypeEqualsAndLabelTextEqualsAndIgnoredNot";
    }
    
    @RequestMapping(params = "find=ByLsTypeEqualsAndLabelTextEqualsAndIgnoredNot", method = RequestMethod.GET)
    public String ContainerLabelController.findContainerLabelsByLsTypeEqualsAndLabelTextEqualsAndIgnoredNot(@RequestParam("lsType") String lsType, @RequestParam("labelText") String labelText, @RequestParam(value = "ignored", required = false) boolean ignored, Model uiModel) {
        uiModel.addAttribute("containerlabels", ContainerLabel.findContainerLabelsByLsTypeEqualsAndLabelTextEqualsAndIgnoredNot(lsType, labelText, ignored).getResultList());
        return "containerlabels/list";
    }
    
}
