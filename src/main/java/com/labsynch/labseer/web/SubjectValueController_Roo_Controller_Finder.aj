// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.labsynch.labseer.web;

import com.labsynch.labseer.domain.SubjectState;
import com.labsynch.labseer.domain.SubjectValue;
import com.labsynch.labseer.web.SubjectValueController;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

privileged aspect SubjectValueController_Roo_Controller_Finder {
    
    @RequestMapping(params = { "find=ByCodeValueEquals", "form" }, method = RequestMethod.GET)
    public String SubjectValueController.findSubjectValuesByCodeValueEqualsForm(Model uiModel) {
        return "subjectvalues/findSubjectValuesByCodeValueEquals";
    }
    
    @RequestMapping(params = "find=ByCodeValueEquals", method = RequestMethod.GET)
    public String SubjectValueController.findSubjectValuesByCodeValueEquals(@RequestParam("codeValue") String codeValue, Model uiModel) {
        uiModel.addAttribute("subjectvalues", SubjectValue.findSubjectValuesByCodeValueEquals(codeValue).getResultList());
        return "subjectvalues/list";
    }
    
    @RequestMapping(params = { "find=ByIgnoredNotAndCodeValueEquals", "form" }, method = RequestMethod.GET)
    public String SubjectValueController.findSubjectValuesByIgnoredNotAndCodeValueEqualsForm(Model uiModel) {
        return "subjectvalues/findSubjectValuesByIgnoredNotAndCodeValueEquals";
    }
    
    @RequestMapping(params = "find=ByIgnoredNotAndCodeValueEquals", method = RequestMethod.GET)
    public String SubjectValueController.findSubjectValuesByIgnoredNotAndCodeValueEquals(@RequestParam(value = "ignored", required = false) boolean ignored, @RequestParam("codeValue") String codeValue, Model uiModel) {
        uiModel.addAttribute("subjectvalues", SubjectValue.findSubjectValuesByIgnoredNotAndCodeValueEquals(ignored, codeValue).getResultList());
        return "subjectvalues/list";
    }
    
    @RequestMapping(params = { "find=ByLsState", "form" }, method = RequestMethod.GET)
    public String SubjectValueController.findSubjectValuesByLsStateForm(Model uiModel) {
        uiModel.addAttribute("subjectstates", SubjectState.findAllSubjectStates());
        return "subjectvalues/findSubjectValuesByLsState";
    }
    
    @RequestMapping(params = "find=ByLsState", method = RequestMethod.GET)
    public String SubjectValueController.findSubjectValuesByLsState(@RequestParam("lsState") SubjectState lsState, Model uiModel) {
        uiModel.addAttribute("subjectvalues", SubjectValue.findSubjectValuesByLsState(lsState).getResultList());
        return "subjectvalues/list";
    }
    
}
