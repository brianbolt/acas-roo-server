// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.labsynch.labseer.web;

import com.labsynch.labseer.domain.AbstractThing;
import com.labsynch.labseer.domain.LsTransaction;
import com.labsynch.labseer.domain.ThingPage;
import com.labsynch.labseer.web.ThingPageController;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect ThingPageController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String ThingPageController.create(@Valid ThingPage thingPage, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, thingPage);
            return "thingpages/create";
        }
        uiModel.asMap().clear();
        thingPage.persist();
        return "redirect:/thingpages/" + encodeUrlPathSegment(thingPage.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String ThingPageController.createForm(Model uiModel) {
        populateEditForm(uiModel, new ThingPage());
        List<String[]> dependencies = new ArrayList<String[]>();
        if (AbstractThing.countAbstractThings() == 0) {
            dependencies.add(new String[] { "abstractthing", "abstractthings" });
        }
        uiModel.addAttribute("dependencies", dependencies);
        return "thingpages/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String ThingPageController.show(@PathVariable("id") Long id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("thingpage", ThingPage.findThingPage(id));
        uiModel.addAttribute("itemId", id);
        return "thingpages/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String ThingPageController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("thingpages", ThingPage.findThingPageEntries(firstResult, sizeNo));
            float nrOfPages = (float) ThingPage.countThingPages() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("thingpages", ThingPage.findAllThingPages());
        }
        addDateTimeFormatPatterns(uiModel);
        return "thingpages/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String ThingPageController.update(@Valid ThingPage thingPage, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, thingPage);
            return "thingpages/update";
        }
        uiModel.asMap().clear();
        thingPage.merge();
        return "redirect:/thingpages/" + encodeUrlPathSegment(thingPage.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String ThingPageController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, ThingPage.findThingPage(id));
        return "thingpages/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String ThingPageController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        ThingPage thingPage = ThingPage.findThingPage(id);
        thingPage.remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/thingpages";
    }
    
    void ThingPageController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("thingPage_recordeddate_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("thingPage_modifieddate_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
    }
    
    void ThingPageController.populateEditForm(Model uiModel, ThingPage thingPage) {
        uiModel.addAttribute("thingPage", thingPage);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("abstractthings", AbstractThing.findAllAbstractThings());
        uiModel.addAttribute("lstransactions", LsTransaction.findAllLsTransactions());
    }
    
    String ThingPageController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
