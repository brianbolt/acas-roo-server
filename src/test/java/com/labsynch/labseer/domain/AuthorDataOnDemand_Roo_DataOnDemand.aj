// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.labsynch.labseer.domain;

import com.labsynch.labseer.domain.Author;
import com.labsynch.labseer.domain.AuthorDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect AuthorDataOnDemand_Roo_DataOnDemand {
    
    declare @type: AuthorDataOnDemand: @Component;
    
    private Random AuthorDataOnDemand.rnd = new SecureRandom();
    
    private List<Author> AuthorDataOnDemand.data;
    
    public Author AuthorDataOnDemand.getNewTransientAuthor(int index) {
        Author obj = new Author();
        setActivationDate(obj, index);
        setActivationKey(obj, index);
        setEmailAddress(obj, index);
        setEnabled(obj, index);
        setFirstName(obj, index);
        setLastName(obj, index);
        setLocked(obj, index);
        setModifiedDate(obj, index);
        setPassword(obj, index);
        setRecordedDate(obj, index);
        setUserName(obj, index);
        return obj;
    }
    
    public void AuthorDataOnDemand.setActivationDate(Author obj, int index) {
        Date activationDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setActivationDate(activationDate);
    }
    
    public void AuthorDataOnDemand.setActivationKey(Author obj, int index) {
        String activationKey = "activationKey_" + index;
        obj.setActivationKey(activationKey);
    }
    
    public void AuthorDataOnDemand.setEmailAddress(Author obj, int index) {
        String emailAddress = "foo" + index + "@bar.com";
        if (emailAddress.length() > 255) {
            emailAddress = new Random().nextInt(10) + emailAddress.substring(1, 255);
        }
        obj.setEmailAddress(emailAddress);
    }
    
    public void AuthorDataOnDemand.setEnabled(Author obj, int index) {
        Boolean enabled = Boolean.TRUE;
        obj.setEnabled(enabled);
    }
    
    public void AuthorDataOnDemand.setFirstName(Author obj, int index) {
        String firstName = "firstName_" + index;
        if (firstName.length() > 255) {
            firstName = firstName.substring(0, 255);
        }
        obj.setFirstName(firstName);
    }
    
    public void AuthorDataOnDemand.setLastName(Author obj, int index) {
        String lastName = "lastName_" + index;
        if (lastName.length() > 255) {
            lastName = lastName.substring(0, 255);
        }
        obj.setLastName(lastName);
    }
    
    public void AuthorDataOnDemand.setLocked(Author obj, int index) {
        Boolean locked = Boolean.TRUE;
        obj.setLocked(locked);
    }
    
    public void AuthorDataOnDemand.setModifiedDate(Author obj, int index) {
        Date modifiedDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setModifiedDate(modifiedDate);
    }
    
    public void AuthorDataOnDemand.setPassword(Author obj, int index) {
        String password = "password_" + index;
        if (password.length() > 255) {
            password = password.substring(0, 255);
        }
        obj.setPassword(password);
    }
    
    public void AuthorDataOnDemand.setRecordedDate(Author obj, int index) {
        Date recordedDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setRecordedDate(recordedDate);
    }
    
    public void AuthorDataOnDemand.setUserName(Author obj, int index) {
        String userName = "userName_" + index;
        if (userName.length() > 255) {
            userName = new Random().nextInt(10) + userName.substring(1, 255);
        }
        obj.setUserName(userName);
    }
    
    public Author AuthorDataOnDemand.getSpecificAuthor(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Author obj = data.get(index);
        Long id = obj.getId();
        return Author.findAuthor(id);
    }
    
    public Author AuthorDataOnDemand.getRandomAuthor() {
        init();
        Author obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Author.findAuthor(id);
    }
    
    public boolean AuthorDataOnDemand.modifyAuthor(Author obj) {
        return false;
    }
    
    public void AuthorDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Author.findAuthorEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Author' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Author>();
        for (int i = 0; i < 10; i++) {
            Author obj = getNewTransientAuthor(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
