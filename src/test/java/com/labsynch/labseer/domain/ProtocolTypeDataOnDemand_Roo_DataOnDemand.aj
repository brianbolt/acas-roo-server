// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.labsynch.labseer.domain;

import com.labsynch.labseer.domain.ProtocolType;
import com.labsynch.labseer.domain.ProtocolTypeDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect ProtocolTypeDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ProtocolTypeDataOnDemand: @Component;
    
    private Random ProtocolTypeDataOnDemand.rnd = new SecureRandom();
    
    private List<ProtocolType> ProtocolTypeDataOnDemand.data;
    
    public ProtocolType ProtocolTypeDataOnDemand.getNewTransientProtocolType(int index) {
        ProtocolType obj = new ProtocolType();
        setTypeName(obj, index);
        return obj;
    }
    
    public void ProtocolTypeDataOnDemand.setTypeName(ProtocolType obj, int index) {
        String typeName = "typeName_" + index;
        if (typeName.length() > 128) {
            typeName = new Random().nextInt(10) + typeName.substring(1, 128);
        }
        obj.setTypeName(typeName);
    }
    
    public ProtocolType ProtocolTypeDataOnDemand.getSpecificProtocolType(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        ProtocolType obj = data.get(index);
        Long id = obj.getId();
        return ProtocolType.findProtocolType(id);
    }
    
    public ProtocolType ProtocolTypeDataOnDemand.getRandomProtocolType() {
        init();
        ProtocolType obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return ProtocolType.findProtocolType(id);
    }
    
    public boolean ProtocolTypeDataOnDemand.modifyProtocolType(ProtocolType obj) {
        return false;
    }
    
    public void ProtocolTypeDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = ProtocolType.findProtocolTypeEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'ProtocolType' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<ProtocolType>();
        for (int i = 0; i < 10; i++) {
            ProtocolType obj = getNewTransientProtocolType(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
